<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://caedmonjiang.github.io/</id>
    <title>caedmon</title>
    <updated>2019-08-10T09:02:14.992Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://caedmonjiang.github.io/"/>
    <link rel="self" href="https://caedmonjiang.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://caedmonjiang.github.io//images/avatar.png</logo>
    <icon>https://caedmonjiang.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, caedmon</rights>
    <entry>
        <title type="html"><![CDATA[分布式事务教程笔记]]></title>
        <id>https://caedmonjiang.github.io//post/fen-bu-shi-shi-wu-jiao-cheng-bi-ji</id>
        <link href="https://caedmonjiang.github.io//post/fen-bu-shi-shi-wu-jiao-cheng-bi-ji">
        </link>
        <updated>2019-08-10T09:01:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="分布式事务解决方案">分布式事务解决方案</h1>
<ul>
<li>可靠消息最终一致性方案</li>
<li>TCC 方案</li>
<li>最大努力通知型方案</li>
</ul>
<h1 id="事务">事务</h1>
<p>由一组操作构成的可靠、独立的工作单元</p>
<p>事务的 ACID</p>
<ul>
<li>Atomicity （原子性）</li>
<li>Consistency（一致性）</li>
<li>Isolation（隔离性）</li>
<li>Durability（持久性）</li>
</ul>
<h2 id="本地事务">本地事务</h2>
<p><img src="https://gitee.com/caedmon/pics/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2019/8/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-1565426226190.png" alt="本地事务"></p>
<h2 id="全局事务dtp模型-标准分布式事务">全局事务（DTP模型）--标准分布式事务</h2>
<p><img src="https://gitee.com/caedmon/pics/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2019/8/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-1565426515706.png" alt="全局事务标准"></p>
<h2 id="全局事务dtp模型-xa">全局事务（DTP模型）--XA</h2>
<p><img src="https://gitee.com/caedmon/pics/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2019/8/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-1565427605040.png" alt="全局事务XA"></p>
<h2 id="两阶段提交two-phase-commit">两阶段提交（Two Phase Commit）</h2>
<p><img src="https://gitee.com/caedmon/pics/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2019/8/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0-1565426775713.png" alt="两阶段提交"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker 设置 http 方式登录私有镜像仓库]]></title>
        <id>https://caedmonjiang.github.io//post/docker-she-zhi-http-fang-shi-deng-lu-si-you-jing-xiang-cang-ku</id>
        <link href="https://caedmonjiang.github.io//post/docker-she-zhi-http-fang-shi-deng-lu-si-you-jing-xiang-cang-ku">
        </link>
        <updated>2019-08-09T05:03:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="找到-dockerservice-文件的位置">找到 docker.service 文件的位置</h3>
<p>执行命令  <code>systemctl status docker</code>  ，得到如下输出</p>
<pre><code class="language-bash">● docker.service - Docker Application Container Engine
   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)
   Active: active (running) since 四 2019-08-08 17:03:09 CST; 19h ago
     Docs: https://docs.docker.com
 Main PID: 21551 (dockerd)
    Tasks: 39
   Memory: 69.9M
   CGroup: /system.slice/docker.service
           └─21551 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --insecure-registry=47.97.211.201:8082
</code></pre>
<p>其中， Loaded 一项便指明了 docker.service 文件的位置</p>
<h3 id="编辑-dockerservice">编辑 docker.service</h3>
<p>编辑 docker.service，在 ExecStart 后添加 --insecure-registry 参数，代码片段如下：</p>
<pre><code>[Service]
Type=notify
ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --insecure-registry=192.168.0.100:8001
ExecReload=/bin/kill -s HUP $MAINPID
TimeoutSec=0
RestartSec=2
Restart=always
</code></pre>
<h3 id="重启-docker-服务">重启 docker 服务</h3>
<pre><code class="language-sh">systemctl daemon-reload
systemctl restart docker
</code></pre>
<h3 id="登陆私有仓库">登陆私有仓库</h3>
<p>命令为： <code>docker login [私有仓库 IP 或 域名]</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[K8S拉取私有仓库的镜像]]></title>
        <id>https://caedmonjiang.github.io//post/k8s-la-qu-si-you-cang-ku-de-jing-xiang</id>
        <link href="https://caedmonjiang.github.io//post/k8s-la-qu-si-you-cang-ku-de-jing-xiang">
        </link>
        <updated>2019-08-09T04:50:32.000Z</updated>
        <content type="html"><![CDATA[<p>本解决方案通过 k8s 的 secret 实现。只需要在 k8s 的 master 节点上配置好即可。</p>
<h3 id="步骤1">步骤1</h3>
<p>在 k8s 的 master 节点上通过 docker login 登陆私有仓库。登陆成功后，会在当前用户的家目录下生成一个文件，路径为：<code>~/.docker/config.json</code>，内容大概如下：</p>
<pre><code class="language-json">{
	&quot;auths&quot;: {
		&quot;192.168.0.100:8001&quot;: {
			&quot;auth&quot;: &quot;eW357WRhdGFoeHlkJJWNWm0yMVgwWmpUSWlDUzI=&quot;
		}
	},
	&quot;HttpHeaders&quot;: {
		&quot;User-Agent&quot;: &quot;Docker-Client/19.03.1 (linux)&quot;
	}
}
</code></pre>
<p>这个文件包含了私有仓库的认证信息。</p>
<h4 id="注意事项">注意事项</h4>
<p>如果是私有仓库使用的是 http 协议，则在 k8s 中的所有节点上做允许 docker 使用 http 协议登陆镜像仓库的设置。</p>
<h3 id="步骤2">步骤2</h3>
<p>将 config.json 文件内容转换成 base64 编码的字符串。执行以下命令即可：</p>
<pre><code class="language-sh">cat ~/.docker/config.json | base64 -w 0
</code></pre>
<h3 id="步骤3">步骤3</h3>
<p>创建 k8s 的 secret 配置文件 hubor-secret.yml，内容如下：</p>
<pre><code class="language-yaml">apiVersion: v1
kind: Secret
metadata:
  name: hubor-secret
  namespace: default
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSI0Ny45Ny4yMTEuMjAxOjgwODIiOiB7CgkJCSJhdXRoIjogImVXOTFaV1JoZEdGb2VIbGtPaKMOKW0weU1WZ3dXbXBVU1dsRFV6ST0iCgkJfQoJfSwKCSJIdHRwSGVhZGVycyI6IHsKCQkiVXNlci1BZ2VudCI6ICJEb2NrZXItQ2xpZW50LzE5LjAzLjEgKGxpbnV4KSIKCX0KfQ==
</code></pre>
<p>其中，<code>.dockerconfigjson</code> 的值为上一步中得到的 base64 编码字符串</p>
<p>执行如下命令，创建 k8s 中的 secret</p>
<pre><code class="language-sh">kubectl apply -f hubor-secret.yml
</code></pre>
<p>至此，k8s 中的配置工作算是结束了。接下来只需要在部署应用容器的时候，在配置中指定 imagePullSecrets 便可从私有仓库拉取镜像。</p>
<h3 id="步骤四">步骤四</h3>
<p>在部署应用时，在配置文件中指定 imagePullSecrets，如下示例：</p>
<pre><code class="language-yml">apiVersion: apps/v1
kind: Deployment
metadata:
  name: test
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test
  template:
    metadata:
      labels:
        app: test
    spec:
      containers:
        - name: test
          image: 192.168.0.100:8001/test:latest
          imagePullPolicy: Always
      imagePullSecrets:
        - name: hubor-secret
</code></pre>
<p>完结。</p>
<p>附上官方文档：https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker的导入导出]]></title>
        <id>https://caedmonjiang.github.io//post/docker-de-dao-ru-dao-chu</id>
        <link href="https://caedmonjiang.github.io//post/docker-de-dao-ru-dao-chu">
        </link>
        <updated>2019-08-09T01:14:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="命令介绍">命令介绍</h1>
<p>涉及的命令有 save/load， export/import</p>
<h2 id="saveload">save/load</h2>
<h3 id="save">save</h3>
<p>命令：<code>docker save [options] images [images...]</code><br>
示例：</p>
<pre><code class="language-sh">#  -o 表示输出到文件, java8.tar 为目标文件, java8:latest 为镜像名称
docker save -o java8.tar java8:latest
</code></pre>
<h3 id="load">load</h3>
<p>命令：<code>docker load [options]</code><br>
示例：</p>
<pre><code class="language-sh"># -i 表示输入文件
docker load -i java8.tar
</code></pre>
<h2 id="exportimport">export/import</h2>
<h3 id="export">export</h3>
<p>命令：<code>docker export [options] container</code><br>
示例：</p>
<pre><code class="language-sh"># -o 表示输出文件，container.tar为目标文件，container是容器名
docker export -o container.tar container
</code></pre>
<h3 id="import">import</h3>
<p>命令：<code>docker import [options] file|URL|- [REPOSITORY[:TAG]]</code><br>
示例：</p>
<pre><code class="language-sh">docker import container.tar container:import
</code></pre>
<h1 id="saveload-与-exportimport-的区别">save/load 与 export/import 的区别</h1>
<p>save/load 是针对镜像的操作，export/import 是针对容器的操作</p>
<p>如果只是要备份镜像，使用 save/load  比较合适；如果是要备份已经启动起来的容器，则应该使用 export/import 命令。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[K8S安装步骤]]></title>
        <id>https://caedmonjiang.github.io//post/k8s-an-zhuang-bu-zhou</id>
        <link href="https://caedmonjiang.github.io//post/k8s-an-zhuang-bu-zhou">
        </link>
        <updated>2019-08-07T06:13:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装步骤">安装步骤</h1>
<h2 id="一-master-节点">一、 master 节点</h2>
<h3 id="11-禁用防火墙-selinux和swap">1.1 禁用防火墙、selinux和swap</h3>
<pre><code>systemctl stop firewalld
systemctl disable firewalld
setenforce 0
sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config
swapoff -a
sed -i 's/.*swap.*/#&amp;/' /etc/fstab
</code></pre>
<h3 id="12-配置内核参数将桥接的ipv4流量传递到iptables的链">1.2 配置内核参数，将桥接的IPv4流量传递到iptables的链</h3>
<pre><code>cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt;EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
</code></pre>
<p>查看命令</p>
<pre><code>sysctl --system
</code></pre>
<h3 id="13-配置docker源">1.3 配置docker源</h3>
<pre><code>wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo
</code></pre>
<h3 id="14-配置-kubernetes-源">1.4 配置 kubernetes 源</h3>
<pre><code>cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF
</code></pre>
<h3 id="15-安装相关程序包docker-ce-kubelet-kubeadm-kubectl">1.5 安装相关程序包（docker-ce kubelet kubeadm kubectl）：</h3>
<pre><code>yum install -y docker-ce kubelet kubeadm kubectl
</code></pre>
<h3 id="16-设置docker和kubelet开机自启动">1.6 设置docker和kubelet开机自启动</h3>
<pre><code>systemctl enable docker kubelet
</code></pre>
<h3 id="17-设置-docker-镜像加速器">1.7 设置 docker 镜像加速器</h3>
<pre><code>sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://dry9722u.mirror.aliyuncs.com&quot;]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
</code></pre>
<h3 id="18-启动-kubeadm-初始化命令">1.8 启动 kubeadm 初始化命令</h3>
<pre><code>kubeadm init --pod-network-cidr=10.244.0.0/16 \
--service-cidr=10.96.0.0/16 \
--image-repository registry.aliyuncs.com/google_containers 
</code></pre>
<p>--image-repository 参数很关键，由于kubeadm 默认从官网k8s.grc.io下载所需镜像，国内无法访问，因此需要通过–image-repository指定阿里云镜像仓库地址。</p>
<p>如果命令执行成功，会得到如下的输出（<strong>一定要保存好 kubeadm join ... 这一串内容，后续配置 node 节点会用到</strong>）：</p>
<pre><code>Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.16.131.129:6443 --token srzvhr.e56rb9ceb8c6idaf \
    --discovery-token-ca-cert-hash sha256:69f2fd9fd889300635f094ef1c954d2eddde08e974cbd2b278393f2c5115709d
</code></pre>
<h3 id="19-根据-kubeadm-初始化命令的输出信息中的提示执行以下命令配置-kubectl-工具">1.9 根据 kubeadm 初始化命令的输出信息中的提示，执行以下命令配置 kubectl 工具：</h3>
<pre><code>mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
</code></pre>
<h3 id="110-此时可以查看一些状态">1.10 此时，可以查看一些状态：</h3>
<p>查看各组件运行状态： kubectl get cs  （kubectl get componentstatus）,得到如下输出</p>
<pre><code># kubectl get cs
NAME                 STATUS    MESSAGE             ERROR
scheduler            Healthy   ok
controller-manager   Healthy   ok
etcd-0               Healthy   {&quot;health&quot;:&quot;true&quot;}
</code></pre>
<p>查看节点信息： kubectl get nodes，得到如下输出</p>
<pre><code># kubectl get nodes
NAME          STATUS     ROLES    AGE   VERSION
centos7-129   NotReady   master   30m   v1.14.3
</code></pre>
<h3 id="111-部署-flannel-网络">1.11 部署 flannel 网络</h3>
<p>可以看到 master 的状态为 <strong>NotReady</strong>，是因为还差一个重要的工具：flannel。</p>
<p>执行以下命令安装 flannel</p>
<pre><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
</code></pre>
<p>等待几分钟后再执行 <code>kubectl get nodes</code>，可以看到 master 的状态已经为 <strong>Ready</strong></p>
<pre><code># kubectl get nodes
NAME          STATUS   ROLES    AGE   VERSION
centos7-129   Ready    master   63m   v1.14.3
</code></pre>
<p>master 节点配置完成！</p>
<h2 id="二-node-节点">二、node 节点</h2>
<h3 id="21-禁用防火墙-selinux和swap">2.1 禁用防火墙、selinux和swap</h3>
<pre><code>systemctl stop firewalld
systemctl disable firewalld
setenforce 0
sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config
swapoff -a
sed -i 's/.*swap.*/#&amp;/' /etc/fstab
</code></pre>
<h3 id="22-配置内核参数将桥接的ipv4流量传递到iptables的链">2.2 配置内核参数，将桥接的IPv4流量传递到iptables的链</h3>
<pre><code>cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt;EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
</code></pre>
<p>查看命令</p>
<pre><code>sysctl --system
</code></pre>
<h3 id="23-配置docker源">2.3 配置docker源</h3>
<pre><code>wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo
</code></pre>
<h3 id="24-配置-kubernetes-源">2.4 配置 kubernetes 源</h3>
<pre><code>cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF
</code></pre>
<h3 id="25-安装相关程序包docker-ce-kubelet-kubeadm-kubectl">2.5 安装相关程序包（docker-ce kubelet kubeadm kubectl）：</h3>
<pre><code>yum install -y docker-ce kubelet kubeadm
</code></pre>
<h3 id="26-设置docker和kubelet开机自启动">2.6 设置docker和kubelet开机自启动</h3>
<pre><code>systemctl enable docker kubelet
</code></pre>
<h3 id="27-设置-docker-镜像加速器">2.7 设置 docker 镜像加速器</h3>
<pre><code>sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://dry9722u.mirror.aliyuncs.com&quot;]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
</code></pre>
<h3 id="28-执行加入-node-节点的命令此处的-token-和-sha256-可在-master-上执行-kubeadm-init-命名后的输出内容中得到">2.8 执行加入 node 节点的命令（此处的 token 和 sha256 可在 master 上执行 kubeadm init 命名后的输出内容中得到）：</h3>
<pre><code>kubeadm join 192.168.1.8:6443 --token 4y1nlo.xcnog77gl7jqz3cq \
    --discovery-token-ca-cert-hash sha256:d5b3ca5ceea84d321aaa2ca43317ed53fdf430afdc447cb76295d2ac7f914e84 --ignore-preflight-errors=Swap
</code></pre>
<h1 id="三-为-k8s-集群新增-node-节点">三、为 K8S 集群新增 node 节点</h1>
<p>K8S 的 apiserver 发出的 token 有效期只有1天，在 token 过期的情况下或者忘记 token 的情况下，可以通过如下脚本来获取将新 node 节点加入到 K8S 集群中的命令。</p>
<p>1). 创建一个 bash 脚本，如 gen_join_command.sh<br>
具体代码如下：</p>
<pre><code class="language-bash">#!/bin/bash

if [ $EUID -ne 0 ];then
    echo &quot;You must be root (or sudo) to run this script&quot;
    exit 1
fi

if [ $# != 1 ] ; then
    echo &quot;Usage: $0 [master-hostname | master-ip-address]&quot;
    echo &quot; e.g.: $0 api.k8s.hiko.im&quot;
    exit 1;
fi

token=`kubeadm token create`
cert_hash=`openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'`

echo &quot;Refer the following command to join kubernetes cluster:&quot;
echo &quot;kubeadm join $1:6443 --token ${token} --discovery-token-ca-cert-hash sha256:${cert_hash} --ignore-preflight-errors=Swap&quot;
</code></pre>
<p>2). 授予脚本的执行权限</p>
<pre><code>chmod +x ./gen_join_command.sh
</code></pre>
<p>3). 执行脚本 <code>gen_join_command.sh [master 节点的IP 或者 域名]</code>， 如：</p>
<pre><code>./gen_join_command.sh 192.168.1.8
</code></pre>
<p>4). 复制上一步的命令执行后得到的输出 “kubeadm join ...”<br>
5). 将复制的语句在要新加的 node 节点服务器上执行即可。</p>
<h1 id="四-部署-dashboard">四、部署 Dashboard</h1>
<p>在 master 节点上部署。</p>
<h2 id="41-创建-dashboard-的-yaml-文件">4.1 创建 Dashboard 的 yaml 文件</h2>
<pre><code>wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
</code></pre>
<p>Dashboard 的 github 地址： https://github.com/kubernetes/dashboard</p>
<p>可在 github 上查看最新版本信息。</p>
<h2 id="42-修改-dashboard-的-yaml-文件">4.2 修改 Dashboard 的 yaml 文件</h2>
<ol>
<li>由于源文件中的 Dashboard 镜像在国内会被墙，所以要将 Dashboard 的镜像修改为国内网络可以拉取到的镜像。</li>
<li>修改为 NodePort 的方式暴露服务，以便可以直接通过主机地址访问。</li>
</ol>
<pre><code>sed -i 's/k8s.gcr.io/loveone/g' kubernetes-dashboard.yaml
sed -i '/targetPort:/a\ \ \ \ \ \ nodePort: 30001\n\ \ type: NodePort' kubernetes-dashboard.yaml
</code></pre>
<h2 id="43-部署-dashboard">4.3 部署 Dashboard</h2>
<pre><code>kubectl apply -f kubernetes-dashboard.yaml
</code></pre>
<h2 id="44-检查-dashboard-服务运行状态">4.4 检查 Dashboard 服务运行状态</h2>
<pre><code>kubectl get deployment kubernetes-dashboard -n kube-system
kubectl get pods -n kube-system -o wide
kubectl get services -n kube-system
</code></pre>
<p>在浏览器中访问 Dashboard ： https://192.168.1.8:30001<br>
注意： 是 https !</p>
<h2 id="45-创建账号登陆">4.5 创建账号登陆</h2>
<pre><code>kubectl create serviceaccount  dashboard-admin -n kube-system
kubectl create clusterrolebinding  dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin
kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/{print $1}')
</code></pre>
<h2 id="46-使用上一步得到的-token-登陆-dashboard">4.6 使用上一步得到的 token 登陆 Dashboard</h2>
<p><img src="https://gitee.com/caedmon/pics/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2019/8/K8S_%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%3C_br%3E-1565233207005.png" alt="登录界面"></p>
<p>登陆后即可看到 Dashboard 首页。如下图：<br>
<img src="https://gitee.com/caedmon/pics/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2019/8/K8S_%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%3C_br%3E-1565233230314.png" alt="首页界面"></p>
]]></content>
    </entry>
</feed>